# SwissDRG Webgrouper

A jruby project that acts as web frontend for the grouper produced by SwissDRG. Deployed on webgrouper.swissdrg.org.

## Getting started

Make sure you have mongodb and memcached installed:

    sudo apt-get install memcached mongodb

This project only runs on Jruby, so make sure to install all gems on a compatible ruby version.

### Configuring the database

Use the standard `rake db:create` to get started, then make sure that you have a valid configuration for
a postgresql database seeded with the `classifications-parser` project in `db/pg_config.yml`.
Then you can run the task `rake db:seed` to fill the database with all classifications necesary.

#### Create indices

So the queries are not dead slow, it is best to create indices with the following command:

    RAILS_ENV=production rake db:mongoid:create_indexes

### Binaries

#### Grouper
Place the binary for the normal grouper in `lib/grouper.jar`. The systems are placed in `lib/grouperspecs/{system_id}`.
This folder should contain

* A folder named `workspace` containing the workspace of this system
* A csv-file called `catalogue-acute.csv` (for the batchgrouper, hospital data)
* A csv-file called `catalogue-birthhouses.csv` (for the batchgrouper, birthhouse data)

#### Tarpsy
Place the binary in `lib/tarpsy-grouper.jar`.
The systems for tarpsy are expected to be in `lib/tarpsy/{system_id}/workspace`. Each individual system needs its own
folder. If you want two systems to use the same folder here, use symlinks.

## Run tests

You can run our specs by entering the following:

If you just want to run tests once, it is enough to run rspec by itself

	bundle exec rspec spec/

If you need to repeatedly run the tests, you are advised to have a rails instance running in the background for testing
by executing

    theine_server

The tests can then be executed much faster by executing them on the theine instances via

    theine rspec spec/

## Adding a new system

Just add a new entry in the Systems table. You can either do this by hand (in the rails console)
update the file `db/systems.csv` and then use the script `db/seed_systems.rb`.

All files needed for this version (specs, catalgue...) have to be coppied to the specs folder,
into a subfolder named after the system_id.

In case you want to add a new Kernel, you need to change the initializer found in `config/initializers/load_grouper_kernel.rb`.
Make sure to empty the cache using

    RAILS_ENV=production bundle exec rake memcached:flush

Since, the new kernel would not be used otherwise (only the cached, old one).